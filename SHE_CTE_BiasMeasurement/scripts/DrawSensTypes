#!/usr/bin/env python

""" @file DrawSensTypes.py

    Created 5 January 2021

    Main function to draw a plot explaining different types of sensitivity testing.
"""

__updated__ = "2021-01-08"

# Copyright (C) 2012-2020 Euclid Science Ground Segment
#
# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
from copy import deepcopy
from logging import getLogger
from os.path import join

import matplotlib.pyplot as pyplot
import numpy as np


fig_title = "Types of Sensitivity Testing"
title_fontsize = 18

fig_xlabel = r"$X$"
fig_ylabel = r"$\hat{X}$"
axis_label_fontsize = 18

# Details for axis arrows
axis_arrow_headwidth = 0.035
axis_arrow_headlength = 0.035
axis_arrow_overhang = 0.
axis_linewidth = 1.

# Details for arrows in the plot
plot_arrow_headwidth = 0.025
plot_arrow_headlength = 0.025
plot_arrow_overhang = 0.3
plot_linewidth = 1

# Details for indicator arrows
indicator_arrow_headwidth = 0.025
indicator_arrow_headlength = 0.025
indicator_arrow_overhang = 1.0
indicator_linewidth = 0.5
indicator_padding = 0.02

marker_base_point = 0.2
arrow_length = 0.3

markersize = 100
arrow_marker_adjustment = 0.018 * np.sqrt(markersize / 100)
diag_arrow_marker_adjustment = arrow_marker_adjustment / np.sqrt(2.)

label_fontsize = 10
label_box_props = dict(boxstyle='square', facecolor='w', edgecolor='k')

truth_color = (0, 0, 1)
truth_indicator_source = (0.6, 0.1)
truth_label_offset = (0., 0.)
truth_text = "\n".join((r"$\mathbf{Truth}$ $\mathbf{Sensitivity:}$ The change in bias",
                        r"due to a change in the truth value $X$,",
                        r"with the measurement value $\hat{X}$ held",
                        r"constant."))
truth_box_props = deepcopy(label_box_props)
truth_box_props["edgecolor"] = truth_color

meas_color = (1, 0, 0)
meas_indicator_source = (0.3, 0.6)
meas_label_offset = (-0.2, 0.)
meas_text = "\n".join((r"$\mathbf{Measurement}$ $\mathbf{Sensitivity:}$ The change in bias due to a change in the",
                       r"measurement value $\hat{X}$, with the truth value $X$ held constant."))
meas_box_props = deepcopy(label_box_props)
meas_box_props["edgecolor"] = meas_color

locus_color = (1, 0, 1)
locus_indicator_source = (0.6, 0.4)
locus_label_offset = (0., 0.)
locus_text = "\n".join((r"$\mathbf{Locus}$ $\mathbf{Sensitivity:}$ The change in bias",
                        r"due to a change in both the the truth value $X$",
                        r"and the measurement value $\hat{X}$, within",
                        r"the locus $\hat{X}=X$."))
locus_box_props = deepcopy(label_box_props)
locus_box_props["edgecolor"] = locus_color


def defineSpecificProgramOptions():
    """
    @brief
        Defines options for this program.

    @return
        An ArgumentParser.
    """

    logger = getLogger(__name__)

    logger.debug('#')
    logger.debug('# Entering SHE_CTE_DrawSensTypes defineSpecificProgramOptions()')
    logger.debug('#')

    parser = argparse.ArgumentParser()

    # Output data
    parser.add_argument('--sens_types_plot', type=str, default="sens_types.pdf",
                        help='Desired name of the output sensitivity types plot.')

    # Arguments
    parser.add_argument('--hide', action="store_true",
                        help="Don't show any generated plots.")

    parser.add_argument('--profile', action='store_true',
                        help='Store profiling data for execution.')

    # Arguments needed by the pipeline runner
    parser.add_argument('--workdir', type=str, default=".")
    parser.add_argument('--logdir', type=str, default=".")

    logger.debug('# Exiting SHE_CTE_DrawSensTypes defineSpecificProgramOptions()')

    return parser


def mainMethod(args):
    """
    @brief
        The "main" method for this program, to measure bias.

    @details
        This method is the entry point to the program. In this sense, it is
        similar to a main (and it is why it is called mainMethod()).
    """

    logger = getLogger(__name__)

    logger.debug('#')
    logger.debug('# Entering SHE_CTE_DrawSensTypes mainMethod()')
    logger.debug('#')

    if args.profile:
        import cProfile
        cProfile.runctx("draw_sens_types_from_args(args)", {},
                        {"draw_sens_types_from_args": draw_sens_types_from_args,
                         "args": args}, filename="measure_bias.prof")
    else:
        draw_sens_types_from_args(args)

    logger.debug('# Exiting SHE_CTE_DrawSensTypes mainMethod()')

    return


def draw_sens_types_from_args(args):
    """ @TODO main docstring
    """

    # Set up the general layout of the plot
    fig = pyplot.figure()

    ax = fig.add_subplot(1, 1, 1)

    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)

    ax.set_xticks([])
    ax.set_yticks([])

    fig.subplots_adjust(wspace=0, hspace=0, bottom=0.075, right=0.75, top=0.9, left=0.075)

    # Remove the default axes
    for side in ["left", "right", "bottom", "top"]:
        ax.spines[side].set_visible(False)

    # Draw arrows as replacement axes
    ax.arrow(0., 0., 1.3, 0., facecolor='k', edgecolor='k', linewidth=axis_linewidth,
             head_width=axis_arrow_headwidth, head_length=axis_arrow_headlength, overhang=axis_arrow_overhang,
             length_includes_head=True, clip_on=False)

    ax.arrow(0., 0., 0., 1., facecolor='k', edgecolor='k', linewidth=axis_linewidth,
             head_width=axis_arrow_headwidth, head_length=axis_arrow_headlength, overhang=axis_arrow_overhang,
             length_includes_head=True, clip_on=False)

    # Draw plot and axis arrows
    pyplot.title(fig_title, fontsize=title_fontsize)
    ax.set_xlabel(fig_xlabel, fontsize=axis_label_fontsize)
    ax.set_ylabel(fig_ylabel, fontsize=axis_label_fontsize)

    # Draw an arrow for the ideal line
    ax.arrow(0.9999, 0.9999, 0.0001, 0.0001, facecolor="k", edgecolor="k",
             head_width=plot_arrow_headwidth, head_length=plot_arrow_headlength, overhang=plot_arrow_overhang,
             length_includes_head=True, clip_on=False)
    ax.plot([0., 1.], [0., 1.], linestyle=":", c="k")

    # Draw the base point
    ax.scatter([marker_base_point], [marker_base_point], s=markersize, c="k", marker="o")

    # Draw the test points
    ax.scatter([marker_base_point, marker_base_point + arrow_length, marker_base_point + arrow_length],
               [marker_base_point + arrow_length, marker_base_point, marker_base_point + arrow_length],
               s=markersize, marker="o",
               facecolors="None", edgecolors=[(1, 0, 0), (0, 0, 1), (1, 0, 1)])

    # Draw arrows for each type of sensitivity
    ax.arrow(marker_base_point + arrow_marker_adjustment, marker_base_point,
             arrow_length - 2 * arrow_marker_adjustment, 0.,
             facecolor=truth_color, edgecolor=truth_color,
             head_width=plot_arrow_headwidth, head_length=plot_arrow_headlength, overhang=plot_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=0.5 * plot_linewidth)
    ax.arrow(marker_base_point, marker_base_point + arrow_marker_adjustment,
             0., arrow_length - 2 * arrow_marker_adjustment,
             facecolor=(1, 0, 0), edgecolor=(1, 0, 0),
             head_width=plot_arrow_headwidth, head_length=plot_arrow_headlength, overhang=plot_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=0.5 * plot_linewidth)
    ax.arrow(marker_base_point + diag_arrow_marker_adjustment, marker_base_point + diag_arrow_marker_adjustment,
             arrow_length - 2 * diag_arrow_marker_adjustment, arrow_length - 2 * diag_arrow_marker_adjustment,
             facecolor=(1, 0, 1), edgecolor=(1, 0, 1),
             head_width=plot_arrow_headwidth, head_length=plot_arrow_headlength, overhang=plot_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=0.5 * plot_linewidth)

    # Draw arrow for the "adding-up" sensitivities
    ax.plot([marker_base_point + arrow_length, marker_base_point + arrow_length],
            [marker_base_point + arrow_marker_adjustment, marker_base_point +
                arrow_length - arrow_marker_adjustment - plot_arrow_headlength * plot_arrow_overhang],
            linestyle=":", c=(1, 0, 0), linewidth=plot_linewidth)
    ax.arrow(marker_base_point + arrow_length, marker_base_point + arrow_length - arrow_marker_adjustment - 0.0001,
             0., 0.0001,
             facecolor=(1, 1, 1), edgecolor=(1, 0, 0), linestyle=":",
             head_width=plot_arrow_headwidth, head_length=plot_arrow_headlength, overhang=1.0,
             length_includes_head=True, clip_on=False, linewidth=plot_linewidth)

    # Draw text and indicators for each of the types of sensitivities

    # Truth sensitivity
    truth_arrow_midpoint = (marker_base_point + arrow_length / 2, marker_base_point)
    truth_indicator_length = np.subtract(truth_arrow_midpoint, truth_indicator_source)

    ax.arrow(truth_indicator_source[0], truth_indicator_source[1],
             truth_indicator_length[0], truth_indicator_length[1] - indicator_padding,
             facecolor=truth_color, edgecolor=truth_color, linestyle="-",
             head_width=indicator_arrow_headwidth, head_length=indicator_arrow_headlength, overhang=indicator_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=indicator_linewidth)
    ax.text(truth_indicator_source[0] + truth_label_offset[0], truth_indicator_source[1] + truth_label_offset[1],
            truth_text, fontsize=label_fontsize,
            verticalalignment='center', horizontalalignment='left',
            bbox=truth_box_props)

    # Measurement sensitivity
    meas_arrow_midpoint = (marker_base_point, marker_base_point + arrow_length / 2)
    meas_indicator_length = np.subtract(meas_arrow_midpoint, meas_indicator_source)

    ax.arrow(meas_indicator_source[0], meas_indicator_source[1],
             meas_indicator_length[0] + indicator_padding, meas_indicator_length[1],
             facecolor=meas_color, edgecolor=meas_color, linestyle="-",
             head_width=indicator_arrow_headwidth, head_length=indicator_arrow_headlength, overhang=indicator_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=indicator_linewidth)
    ax.text(meas_indicator_source[0] + meas_label_offset[0], meas_indicator_source[1] + meas_label_offset[1],
            meas_text, fontsize=label_fontsize,
            verticalalignment='bottom', horizontalalignment='left',
            bbox=meas_box_props)

    # Locus sensitivity
    locus_arrow_midpoint = (marker_base_point + arrow_length / 2, marker_base_point + arrow_length / 2)
    locus_indicator_length = np.subtract(locus_arrow_midpoint, locus_indicator_source)

    ax.arrow(locus_indicator_source[0], locus_indicator_source[1],
             locus_indicator_length[0] + indicator_padding, locus_indicator_length[1],
             facecolor=locus_color, edgecolor=locus_color, linestyle="-",
             head_width=indicator_arrow_headwidth, head_length=indicator_arrow_headlength, overhang=indicator_arrow_overhang,
             length_includes_head=True, clip_on=False, linewidth=indicator_linewidth)
    ax.text(locus_indicator_source[0] + locus_label_offset[0], locus_indicator_source[1] + locus_label_offset[1],
            locus_text, fontsize=label_fontsize,
            verticalalignment='center', horizontalalignment='left',
            bbox=locus_box_props)

    # Save and show the plot
    qualified_output_filename = join(args.workdir, args.sens_types_plot)
    pyplot.savefig(qualified_output_filename, format=args.sens_types_plot.split(".")[-1],
                   bbox_inches="tight", pad_inches=0.05)

    if not args.hide:
        pyplot.show()

    return


def main():
    """
    @brief
        Alternate entry point for non-Elements execution.
    """

    parser = defineSpecificProgramOptions()

    args = parser.parse_args()

    mainMethod(args)

    return


if __name__ == "__main__":
    main()
